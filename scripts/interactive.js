document.addEventListener('DOMContentLoaded', function() {
    // Service dialog content
    const serviceDialogs = {
        'socialmedia': [
            "Bem-vindo ao nosso serviÃ§o de Social Media! ðŸ‘‹",
            "NÃ³s gerenciamos todo o conteÃºdo e estratÃ©gia das suas redes sociais.",
            "Criamos calendÃ¡rios de postagem personalizados para sua marca.",
            "Desenvolvemos conteÃºdos de alta qualidade para engajar seu pÃºblico.",
            "Analisamos mÃ©tricas e ajustamos as estratÃ©gias para maximizar resultados.",
            "Respondemos comentÃ¡rios e interagimos com sua audiÃªncia.",
            "Fornecemos relatÃ³rios mensais detalhados sobre o desempenho.",
            "Pronto para transformar suas redes sociais? Vamos comeÃ§ar!"
        ],
        'trafego': [
            "Bem-vindo ao nosso serviÃ§o de GestÃ£o de TrÃ¡fego! ðŸš€",
            "NÃ³s criamos e otimizamos campanhas no Facebook e Instagram Ads.",
            "Segmentamos seu pÃºblico-alvo com precisÃ£o para atingir potenciais clientes.",
            "Criamos anÃºncios atrativos que convertem visualizaÃ§Ãµes em vendas.",
            "Monitoramos e otimizamos suas campanhas diariamente.",
            "Realizamos testes A/B para maximizar seus resultados.",
            "Fornecemos relatÃ³rios semanais detalhados sobre o desempenho.",
            "Pronto para aumentar suas vendas com trÃ¡fego pago? Vamos comeÃ§ar!"
        ],
        'sites': [
            "Bem-vindo ao nosso serviÃ§o de CriaÃ§Ã£o de Sites! ðŸ’»",
            "NÃ³s desenvolvemos sites modernos, responsivos e otimizados para SEO.",
            "Criamos designs personalizados que refletem a identidade da sua marca.",
            "Implementamos funcionalidades avanÃ§adas como e-commerce, formulÃ¡rios e integraÃ§Ãµes.",
            "Otimizamos a experiÃªncia do usuÃ¡rio para maximizar conversÃµes.",
            "Garantimos que seu site carregue rapidamente em todos os dispositivos.",
            "Fornecemos suporte tÃ©cnico contÃ­nuo apÃ³s o lanÃ§amento.",
            "Pronto para ter um site profissional e que converte? Vamos comeÃ§ar!"
        ],
        'automacao': [
            "Bem-vindo ao nosso serviÃ§o de AutomaÃ§Ã£o com IA! ðŸ¤–",
            "NÃ³s criamos soluÃ§Ãµes inteligentes para automatizar processos repetitivos.",
            "Desenvolvemos chatbots personalizados para melhorar o atendimento ao cliente.",
            "Implementamos sistemas de resposta automÃ¡tica para suas redes sociais.",
            "Automatizamos fluxos de email marketing para nutriÃ§Ã£o de leads.",
            "Criamos sistemas de anÃ¡lise de dados para insights de negÃ³cio.",
            "Integramos diferentes plataformas para criar fluxos de trabalho eficientes.",
            "Pronto para economizar tempo e recursos com automaÃ§Ã£o? Vamos comeÃ§ar!"
        ]
    };

    // Dialog elements
    const dialogOverlay = document.getElementById('dialog-overlay');
    const dialogText = document.getElementById('dialog-text');
    const dialogNextBtn = document.getElementById('dialog-next');
    
    // Navigation buttons that should be locked initially
    const servicesNavBtn = document.getElementById('services-nav-btn');
    const pricingNavBtn = document.getElementById('pricing-nav-btn');
    
    // Service sections that should unlock navigation when visible
    const servicesSection = document.getElementById('services');
    const pricingSection = document.getElementById('pricing');
    
    // Service detail buttons
    const serviceDetailBtns = document.querySelectorAll('.service-details-btn');
    
    // Current dialog state
    let currentDialogService = null;
    let currentDialogStep = 0;
    
    // Coin counter functionality
    const coinCountElement = document.getElementById('coin-count');
    let coinCount = 0;
    
    // Function to update coin count
    function updateCoinCount(amount) {
        coinCount += amount;
        coinCountElement.textContent = `x ${coinCount}`;
        
        // Animate coin icon
        const coinIcon = document.querySelector('.coin-icon');
        coinIcon.classList.add('coin-collected');
        
        // Remove animation class after animation completes
        setTimeout(() => {
            coinIcon.classList.remove('coin-collected');
        }, 500);
    }
    
    // Add coins when interacting with elements
    function setupCoinInteractions() {
        // Add coins when clicking on service cards
        const serviceCards = document.querySelectorAll('.service-card');
        serviceCards.forEach(card => {
            card.addEventListener('click', () => updateCoinCount(1));
        });
        
        // Add coins when clicking on CTA buttons
        const ctaButtons = document.querySelectorAll('.cta-btn');
        ctaButtons.forEach(btn => {
            btn.addEventListener('click', () => updateCoinCount(2));
        });
        
        // Add coins when scrolling to new sections
        const sections = document.querySelectorAll('section');
        let visitedSections = new Set();
        
        window.addEventListener('scroll', () => {
            sections.forEach(section => {
                if (isInViewport(section) && !visitedSections.has(section.id)) {
                    visitedSections.add(section.id);
                    updateCoinCount(5);
                }
            });
        });
    }
    
    // Function to check if an element is in the viewport
    function isInViewport(element) {
        if (!element) return false;
        const rect = element.getBoundingClientRect();
        return (
            rect.top <= (window.innerHeight * 0.8) &&
            rect.bottom >= (window.innerHeight * 0.2)
        );
    }
    
    // Function to update navigation button states based on scrolling
    function updateNavButtons() {
        // Check services section
        if (isInViewport(servicesSection) || 
            window.scrollY > servicesSection.offsetTop) {
            if (servicesNavBtn && servicesNavBtn.classList.contains('locked')) {
                servicesNavBtn.classList.remove('locked');
                servicesNavBtn.classList.add('unlocked');
                servicesNavBtn.removeAttribute('disabled');
            }
        }
        
        // Check pricing section
        if (isInViewport(pricingSection) || 
            window.scrollY > pricingSection.offsetTop) {
            if (pricingNavBtn && pricingNavBtn.classList.contains('locked')) {
                pricingNavBtn.classList.remove('locked');
                pricingNavBtn.classList.add('unlocked');
                pricingNavBtn.removeAttribute('disabled');
            }
        }
    }
    
    // Function to show service dialog
    function showServiceDialog(serviceType) {
        currentDialogService = serviceType;
        currentDialogStep = 0;
        updateDialogContent();
        dialogOverlay.classList.remove('hidden');
        
        // Add coins when viewing service details
        updateCoinCount(3);
    }
    
    // Function to update dialog content
    function updateDialogContent() {
        if (!currentDialogService) return;
        
        const dialogContent = serviceDialogs[currentDialogService];
        if (currentDialogStep < dialogContent.length) {
            dialogText.textContent = dialogContent[currentDialogStep];
            dialogNextBtn.textContent = currentDialogStep === dialogContent.length - 1 ? "Fechar" : "PrÃ³ximo";
        } else {
            closeDialog();
        }
    }
    
    // Function to close dialog
    function closeDialog() {
        dialogOverlay.classList.add('hidden');
        currentDialogService = null;
        currentDialogStep = 0;
    }
    
    // Event listener for dialog next button
    dialogNextBtn.addEventListener('click', function() {
        currentDialogStep++;
        updateDialogContent();
    });
    
    // Event listeners for service detail buttons
    serviceDetailBtns.forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            const serviceType = this.getAttribute('data-service');
            showServiceDialog(serviceType);
        });
    });
    
    // Listen for scroll events to update navigation buttons
    window.addEventListener('scroll', updateNavButtons);
    
    // Initialize coin interactions
    setupCoinInteractions();
    
    // Initial check for button states
    updateNavButtons();
});
