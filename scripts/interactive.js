document.addEventListener('DOMContentLoaded', function() {
    // Service dialog content
    const serviceDialogs = {
        'socialmedia': [
            "Bem-vindo ao nosso servi√ßo de Social Media! üëã",
            "Eu pessoalmente gerencio todo o conte√∫do e estrat√©gia das suas redes sociais.",
            "Crio calend√°rios de postagem personalizados para sua marca.",
            "Desenvolvo conte√∫dos de alta qualidade para engajar seu p√∫blico.",
            "Analiso m√©tricas e ajusto as estrat√©gias para maximizar resultados.",
            "Respondo coment√°rios e interajo com sua audi√™ncia.",
            "Forne√ßo relat√≥rios mensais detalhados sobre o desempenho.",
            "Pronto para transformar suas redes sociais? Vamos come√ßar!"
        ],
        'trafego': [
            "Bem-vindo ao meu servi√ßo de Gest√£o de Tr√°fego! üöÄ",
            "Crio e otimizo campanhas no Facebook e Instagram Ads.",
            "Segmento seu p√∫blico-alvo com precis√£o para atingir potenciais clientes.",
            "Crio an√∫ncios atrativos que convertem visualiza√ß√µes em vendas.",
            "Monitoro e otimizo suas campanhas diariamente.",
            "Realizo testes A/B para maximizar seus resultados.",
            "Forne√ßo relat√≥rios semanais detalhados sobre o desempenho.",
            "Pronto para aumentar suas vendas com tr√°fego pago? Vamos come√ßar!"
        ],
        'sites': [
            "Bem-vindo ao meu servi√ßo de Cria√ß√£o de Sites! üíª",
            "Desenvolvo sites modernos, responsivos e otimizados para SEO.",
            "Implementamos funcionalidades avan√ßadas como e-commerce, formul√°rios e integra√ß√µes.",
            "Otimizamos a experi√™ncia do usu√°rio para maximizar convers√µes.",
            "Garantimos que seu site carregue rapidamente em todos os dispositivos.",
            "Fornecemos suporte t√©cnico ap√≥s o lan√ßamento.",
            "Pronto para ter um site profissional e que converte? Vamos come√ßar!"
        ],
        'automacao': [
            "Bem-vindo ao nosso servi√ßo de Automa√ß√£o com IA! ü§ñ",
            "N√≥s criamos solu√ß√µes inteligentes para automatizar processos repetitivos.",
            "Desenvolvemos chatbots personalizados e humanizados para melhorar o atendimento ao cliente.",
            "Implementamos sistemas de resposta autom√°tica para suas redes sociais.",
            "Desenvolvo seu proprio Agente de IA para atender seu p√∫blico ou realizar tarefas repetitivas.",
            "Pronto para economizar tempo e recursos com automa√ß√£o? Vamos come√ßar!"
        ]
    };

    // Dialog elements
    const dialogOverlay = document.getElementById('dialog-overlay');
    const dialogText = document.getElementById('dialog-text');
    const dialogNextBtn = document.getElementById('dialog-next');
    
    // Navigation buttons that should be locked initially
    const servicesNavBtn = document.getElementById('services-nav-btn');
    const pricingNavBtn = document.getElementById('pricing-nav-btn');
    
    // Service sections that should unlock navigation when visible
    const servicesSection = document.getElementById('services');
    const pricingSection = document.getElementById('pricing');
    
    // Flag para controlar se o sistema de pontua√ß√£o est√° habilitado
    let scoringEnabled = false;
    
    // Fun√ß√£o global para desabilitar o sistema de pontua√ß√£o deste script
    window.disableInteractiveScoring = function() {
        console.log("Sistema de pontua√ß√£o do interactive.js desativado para evitar duplica√ß√£o");
        scoringEnabled = false;
        
        // Remover event listeners relacionados √† pontua√ß√£o
        const serviceCards = document.querySelectorAll('.service-card');
        serviceCards.forEach(card => {
            card.removeEventListener('click', () => {});
        });
        
        const ctaButtons = document.querySelectorAll('.cta-btn');
        ctaButtons.forEach(btn => {
            btn.removeEventListener('click', () => {});
        });
        
        // Remover listeners de scroll para pontua√ß√£o
        window.removeEventListener('scroll', () => {});
    };
    
    // Fun√ß√£o para atualizar visualiza√ß√£o do contador (sem alterar o valor real)
    function updateCoinCountDisplay() {
        // Apenas para manter a compatibilidade, n√£o incrementa mais
        const coinCountElement = document.getElementById('coin-count');
        if (coinCountElement && scoringEnabled) {
            // Agora apenas atualiza a visualiza√ß√£o com o valor atual
            const currentCount = coinCountElement.textContent;
            
            // Animar coin icon sem alterar o valor
            const coinIcon = document.querySelector('.coin-icon');
            if (coinIcon) {
                coinIcon.classList.add('coin-collected');
                
                // Remove animation class after animation completes
                setTimeout(() => {
                    coinIcon.classList.remove('coin-collected');
                }, 500);
            }
        }
    }
    
    // Fun√ß√£o para verificar se o elemento est√° no viewport
    function isInViewport(element) {
        if (!element) return false;
        const rect = element.getBoundingClientRect();
        return (
            rect.top <= (window.innerHeight * 0.8) &&
            rect.bottom >= (window.innerHeight * 0.2)
        );
    }
    
    // Fun√ß√£o para atualizar bot√µes de navega√ß√£o
    function updateNavButtons() {
        // Check services section
        if (isInViewport(servicesSection) || 
            window.scrollY > servicesSection.offsetTop) {
            if (servicesNavBtn && servicesNavBtn.classList.contains('locked')) {
                servicesNavBtn.classList.remove('locked');
                servicesNavBtn.classList.add('unlocked');
                servicesNavBtn.removeAttribute('disabled');
            }
        }
        
        // Check pricing section
        if (isInViewport(pricingSection) || 
            window.scrollY > pricingSection.offsetTop) {
            if (pricingNavBtn && pricingNavBtn.classList.contains('locked')) {
                pricingNavBtn.classList.remove('locked');
                pricingNavBtn.classList.add('unlocked');
                pricingNavBtn.removeAttribute('disabled');
            }
        }
    }
    
    // Fun√ß√£o para mostrar di√°logo de servi√ßo
    function showServiceDialog(serviceType) {
        // Usar o sistema do main.js para mostrar di√°logos de servi√ßo
        if (window.showServiceModal) {
            window.showServiceModal(serviceType);
            return;
        }
        
        // Fallback caso a fun√ß√£o do main.js n√£o esteja dispon√≠vel
        currentDialogService = serviceType;
        currentDialogStep = 0;
        updateDialogContent();
        dialogOverlay.classList.remove('hidden');
    }
    
    // Current dialog state
    let currentDialogService = null;
    let currentDialogStep = 0;
    
    // Fun√ß√£o para atualizar conte√∫do do di√°logo
    function updateDialogContent() {
        if (!currentDialogService) return;
        
        const dialogContent = serviceDialogs[currentDialogService];
        if (currentDialogStep < dialogContent.length) {
            dialogText.textContent = dialogContent[currentDialogStep];
            dialogNextBtn.textContent = currentDialogStep === dialogContent.length - 1 ? "Fechar" : "Pr√≥ximo";
        } else {
            closeDialog();
        }
    }
    
    // Fun√ß√£o para fechar di√°logo
    function closeDialog() {
        dialogOverlay.classList.add('hidden');
        currentDialogService = null;
        currentDialogStep = 0;
    }
    
    // Event listener para bot√£o de pr√≥ximo do di√°logo
    if (dialogNextBtn) {
        dialogNextBtn.addEventListener('click', function() {
            currentDialogStep++;
            updateDialogContent();
        });
    }
    
    // Event listeners para bot√µes de detalhes de servi√ßo
    const serviceDetailBtns = document.querySelectorAll('.service-details-btn');
    serviceDetailBtns.forEach(btn => {
        btn.addEventListener('click', function(e) {
            // Isso ser√° gerenciado pelo main.js, este listener √© apenas para garantir
            // compatibilidade caso o main.js falhe
            if (!window.showServiceModal) {
                e.preventDefault();
                const serviceType = this.getAttribute('data-service');
                showServiceDialog(serviceType);
            }
        });
    });
    
    // Listen for scroll events to update navigation buttons
    window.addEventListener('scroll', updateNavButtons);
    
    // Initial check for button states
    updateNavButtons();

    // Desabilita o sistema de pontua√ß√£o por padr√£o para evitar conflitos
    window.disableInteractiveScoring();
});
